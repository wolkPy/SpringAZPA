package py.com.qa.view;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import py.com.qa.clases.AbstractInternalFrame;
import py.com.qa.clases.DetalleLanzamiento;
import py.com.qa.clases.ExcelWriter;
import py.com.qa.clases.Lanzamiento;
import py.com.qa.clases.Planilla;
import py.com.qa.configs.Configuracion;

public class DataView extends AbstractInternalFrame implements KeyListener {
	private static final String sqlSelectPlanillaDescripcion = "select a.cod_empresa,a.cod_sucursal,a.cod_planilla,a.descripcion,a.cod_planilla_padre,a.orden,a.estado,nvl(b.plc_tam_col,0) plc_tam_col from qa_planilla a, qa_planilla_config b where a.cod_empresa = b.cod_empresa and a.cod_sucursal = b.cod_sucursal and a.cod_planilla = b.cod_planilla and a.cod_empresa = ? and a.cod_sucursal = ? and a.descripcion = ? and a.cod_planilla_padre <> 0";
	private static final String sqlSelectMovimiento = "select cod_movimiento from qa_lab_mov where cod_empresa = ? and cod_planilla = ? and fecha = ?";
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static String sql;
	private static ExcelWriter ew;
	Connection con = Configuracion.CON;
	private String descripcion;
	private JTable sqlData;
	private int tamanhoCol;
	private long codPlanilla;
	/************ PARSEAR DE DATE A STRING ****************/
	private String formato;
	private SimpleDateFormat sdf;
	private Date date;
	private String fecha;
	/****************** MOVIMIENTO ************************/
	Lanzamiento lan;

	public DataView(String nombrePlanilla) {
		super(nombrePlanilla);
		this.descripcion = nombrePlanilla;
		/************ PARSEAR DE DATE A STRING ****************/
		formato = Configuracion.FILTER_DATE_CHOOSER.getDateFormatString();
		sdf = new SimpleDateFormat(formato);
		date = Configuracion.FILTER_DATE_CHOOSER.getDate();
		fecha = sdf.format(date);
		System.out.println(formato);
		System.out.println(fecha);

		/* RECUPERAMOS EL MODELO DE LA PLANILLA */
		initialize();
		createAndShowGUI();
	}

	private void createAndShowGUI() {
		createAndAddComponentToPrincipalPane(this);

	}

	@SuppressWarnings("static-access")
	private void initialize() {
		Planilla p = null;
		try {
			Connection con = Configuracion.CON;
			PreparedStatement pstmt;
			pstmt = con.prepareStatement(sqlSelectPlanillaDescripcion);
			pstmt.setString(1, Configuracion.CODEMPRESA);
			pstmt.setString(2, Configuracion.CODSUCURSAL);
			pstmt.setString(3, this.descripcion);

			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				p = new Planilla(rs.getString("cod_empresa"), rs.getString("cod_sucursal"), rs.getLong("cod_planilla"),
						rs.getString("descripcion"), rs.getLong("cod_planilla_padre"), rs.getString("orden"),
						rs.getString("estado"), "");
				this.tamanhoCol = rs.getInt("plc_tam_col");
			}
			pstmt.close();
			rs.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		/* SE DEBE TENER LOS FILTROS PARA EL QUERY */
		String codEmpresa = Configuracion.CODEMPRESA;
		String codSucursal = Configuracion.CODSUCURSAL;
		/* VERIFICAMOS SI EXISTE PLANILLA CARGADA EN FECHA SELECCIONADA */

		verificarPlanillaCargada(codEmpresa, p.getCodPlanilla(), this.fecha);

		/****
		 * EN CASO QUE CODIGO DE MOVIMIENTO NO SE HAYA ENCONTRADO SIGUE PROCESO NORMAL
		 */
		if (this.lan == null) {
			if (p != null) {
				codPlanilla = p.getCodPlanilla();
				CallableStatement sentencia;
				/* SE RECUPERA QUERY CON FUNCION DE BASE DE DATOS */
				try {
					sentencia = con.prepareCall("{?=call fnc_devu_qa_columnas(?,?,?)}");
					sentencia.registerOutParameter(1, Types.VARCHAR); // Registrar el parámetro de entrada
					sentencia.setString(2, codEmpresa);
					sentencia.setString(3, codSucursal);
					sentencia.setLong(4, codPlanilla);
					sentencia.executeQuery(); // Realizar la llamada
					this.sql = sentencia.getString(1); // Recoger el parámetro de salida
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		} else {
			/** EN CASO QUE ENCUENTRE MOVIMIENTO SE DEBE CARGAR DATOS YA ALMACENADOS. **/
			/****************** SE CAMBIA LA SENTENCIA DE CONSULTA *********************/
			if (p != null) {
				codPlanilla = p.getCodPlanilla();
				CallableStatement sentencia;
				/* SE RECUPERA QUERY CON FUNCION DE BASE DE DATOS */
				try {
					sentencia = con.prepareCall("{?=call fnc_devu_qa_lab_mov(?,?,?)}");
					sentencia.registerOutParameter(1, Types.VARCHAR); // Registrar el parámetro de entrada
					sentencia.setString(2, codEmpresa);
					sentencia.setString(3, codSucursal);
					sentencia.setLong(4, codPlanilla);
					sentencia.executeQuery(); // Realizar la llamada
					this.sql = sentencia.getString(1); // Recoger el parámetro de salida
					System.out.println(sql);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}

	private void verificarPlanillaCargada(String codEmpresa, long codPlanilla, String fecha) {
		try {
			Connection con = Configuracion.CON;
			PreparedStatement pstmt;
			pstmt = con.prepareStatement(sqlSelectMovimiento);
			pstmt.setString(1, codEmpresa);
			pstmt.setLong(2, codPlanilla);
			pstmt.setString(3, fecha);

			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				lan = new Lanzamiento(rs.getString("cod_empresa"), rs.getLong("cod_movimiento"), rs.getString("fecha"),
						rs.getLong("cod_planilla"));
			}
			pstmt.close();
			rs.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
	}

	private void createAndAddComponentToPrincipalPane(DataView dataView) {
		/** Principal Panel **/
		JPanel principalPane = new JPanel();
		principalPane.setLayout(new BorderLayout());

		JScrollPane centerPane = null;

		sqlData = null;
		System.out.println("sql = " + sql);
		ew = new ExcelWriter(sql);
		if (ew.getData().length != 0 && ew.getColumnNames().length != 0) {
			sqlData = new JTable(ew.getData(), ew.getColumnNames());
			sqlData.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
			centerPane = new JScrollPane(sqlData);
			principalPane.add(centerPane);
		}
		/* RECORRER TABLA */
		for (int k = 0; k < sqlData.getRowCount(); k++) {
			for (int i = 0; i < sqlData.getColumnCount(); i++) {
				/* SETEAR DE ACUERDO AL NOMBRE DE LAS COLUMNAS */
				/* OCULTAR CAMPOS QUE NO SE DEBEN MOSTRAR */
				if (i <= 5) {
					sqlData.getColumn(sqlData.getColumnName(i)).setWidth(0);
					sqlData.getColumn(sqlData.getColumnName(i)).setMinWidth(0);
					sqlData.getColumn(sqlData.getColumnName(i)).setMaxWidth(0);
				} else {
					/* SETEAR TAMAÑO DE COLUMNAS */
					if (this.tamanhoCol != 0) {
						sqlData.getColumn(sqlData.getColumnName(i)).setWidth(this.tamanhoCol);
					}
				}
			}
		}

		centerPane.addKeyListener(this);
		sqlData.addKeyListener(this);
		this.add(principalPane, BorderLayout.CENTER);
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_F10) {
			/* EN CASO DE QUE EXISTA ENTONCES SE DEBE ACTUALIZAR */

			/*********** INSERTAR NUEVO LANZAMIENTO ***************/
			/* EN CASO DE QUE NO EXISTA ENTONCES SE DEBE INSERTAR */
			lan = new Lanzamiento();
			lan.setCodEmpresa(Configuracion.CODEMPRESA);
			/* ENVIAR CODIGO NULO */
			lan.setCodPlanilla(this.codPlanilla);
			/**/
			lan.setFecha(sdf.format(date));
			/* AL INSERTAR RETORNA EL CODIGO DEL MOVIMIENTO INSERTADO */
			lan.setCodPlanilla(lan.insertar());
			/* RECORRER LOS REGISTROS Y GUARDAR */

			// CANTIDAD DE FILAS Y COLUMNAS
			DetalleLanzamiento dLan = null;

			for (int k = 0; k < sqlData.getRowCount(); k++) {
				boolean isOk = false;
				long codVariable;
				String value = null;
				int movCol;
				int indiceCodVariable = 0;
				// String formula = null;
				for (int i = 0; i < sqlData.getColumnCount(); i++) {
					/* AL ENCONTRAR LA COLUMNA 1 EMPIEZA A INSERTAR LOS MOVIMIENTOS */
					if (sqlData.getColumnName(i).toString().equals("1")) {
						isOk = true;
					}
					if (sqlData.getColumnName(i).toString().equals("COD_VARIABLE")) {
						indiceCodVariable = i;
					}

					/* GUARDA VALOR DE CAMPO DE FORMULA */
					// if (sqlData.getColumnName(i).toString().equals("VAR_FORMULA")) {
					// if (!sqlData.getValueAt(k, i).toString().isEmpty()) {
					// formula = sqlData.getValueAt(k, i).toString();
					// }
					// }
					/* VERIFICA SI CAMPO REALMENTE ES FORMULA */
					// if (sqlData.getColumnName(i).toString().equals("ES_FORMULA")) {
					// if (sqlData.getValueAt(k, i).toString().equals("N")) {
					// formula = "";
					// }
					// }

					if (isOk) {
						value = sqlData.getValueAt(k, i).toString();
						codVariable = Long.parseLong(sqlData.getValueAt(k, indiceCodVariable).toString());
						movCol = Integer.parseInt(sqlData.getColumnName(i).toString());
						dLan = new DetalleLanzamiento(lan.getCodEmpresa(), lan.getCodMovimiento(), codVariable, movCol,
								value.replace(".", ","));
						dLan.insertar();
					}
				}
			}
		}
		if (e.getKeyCode() == KeyEvent.VK_F12) {
			/* ANTES DE CERRAR SE DEBE PREGUNTAR SI SE DESEA GUARDAR LOS REGISTROS. */
			this.dispose();
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	public int getTamanhoCol() {
		return tamanhoCol;
	}

	public void setTamanhoCol(int tamanhoCol) {
		this.tamanhoCol = tamanhoCol;
	}

}
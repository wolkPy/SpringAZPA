package py.com.qa.view;

import java.awt.BorderLayout;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import py.com.qa.clases.AbstractInternalFrame;
import py.com.qa.configs.Configuracion;

public class auxiliar2 extends AbstractInternalFrame {

	private JFrame frame;
	private int numeroFilas;
	private int numeroColumnas;
	private String[] columnNames;
	private Object[][] data;
	private JScrollPane centerPane;
	private JTable sqlData;

	/**
	 * Create the application.
	 */
	public auxiliar2() {
		super("Auxiliar");
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 746, 497);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel panel = new JPanel();
		frame.getContentPane().add(panel, BorderLayout.CENTER);

		crearTabla(panel);
	}

	private void crearTabla(JPanel panel) {
		/* SE DEBE TENER LOS FILTROS PARA EL QUERY */
		String codEmpresa = Configuracion.CODEMPRESA;
		String codSucursal = Configuracion.CODSUCURSAL;
		long codPlanilla = 63;
		/**/
		Connection con = Configuracion.CON;
		CallableStatement sentencia;
		String sql = null;
		/* SE RECUPERA QUERY CON FUNCION DE BASE DE DATOS */
		try {
			sentencia = con.prepareCall("{?=call fnc_devu_qa_columnas(?,?,?)}");
			sentencia.registerOutParameter(1, Types.VARCHAR); // Registrar el parámetro de entrada
			//
			sentencia.setString(2, codEmpresa);
			sentencia.setString(3, codSucursal);
			sentencia.setLong(4, codPlanilla);
			//
			sentencia.executeQuery(); // Realizar la llamada
			sql = sentencia.getString(1); // Recoger el parámetro de salida
			System.out.println(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		} // Declarar la sentencia.

		Statement stmt;
		try {
			stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			ResultSet rs = stmt.executeQuery(sql);
			/** cargar nombre de columnas **/
			ResultSetMetaData rsmd = rs.getMetaData();
			columnNames = new String[rsmd.getColumnCount()];
			for (int i = 1; i <= rsmd.getColumnCount(); i++) {
				// System.out.println(rsmd.getColumnCount());
				columnNames[i - 1] = rsmd.getColumnName(i);
			}
			/** ir a ultimo registro, para saber cuantas filas tiene **/
			rs.last();
			numeroFilas = rs.getRow();
			numeroColumnas = rsmd.getColumnCount();
			data = new Object[numeroFilas][numeroColumnas];
			/**
			 * regresa a registro 0, para poder recorrer desde el primer registro, o sino
			 * recorre desde el segundo
			 **/
			rs.beforeFirst();
			int j = 0;
			while (rs.next()) {
				for (int i = 1; i <= rsmd.getColumnCount(); i++) {
					data[j][i - 1] = rs.getObject(i);
				}
				j++;
			}
			rs.close();
			stmt.close();
			// con.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		sqlData = new JTable(data, columnNames);

		centerPane = new JScrollPane(sqlData);
		panel.add(centerPane);
	}

}

package py.com.qa.configs;

import java.awt.Color;
import java.awt.Component;
import java.text.NumberFormat;

import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

public class MiRender extends javax.swing.table.DefaultTableCellRenderer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	NumberFormat nf = NumberFormat.getInstance();

	@Override
	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
			int row, int column) {
		super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		// SI ES FORMULA PINTAR CAMPO
		if (table.getValueAt(row, Configuracion.POSCOLESFORMULA).toString().equals("S")) {
			this.setOpaque(true);
			this.setBackground(Color.RED);
			this.setForeground(Color.YELLOW);
		} else {
			this.setOpaque(false);
			this.setBackground(Color.WHITE);
			this.setForeground(Color.BLACK);
		}
		// SETEAR FORMATO DE CAMPO
		if (table.getValueAt(row, Configuracion.POSCOLTIPOVAR).toString().equals("0")) {
			
		}

		return this;
	}

	/*
	 * public void tableChanged(TableModelEvent e) { DefaultTableModel modelo =
	 * (DefaultTableModel) e.getSource(); int row = e.getFirstRow(); int column =
	 * e.getColumn(); String cellValue = String.valueOf(sqlData.getValueAt(row,
	 * column)); System.out.println("Value at (" + row + "," + column +
	 * ") changed to " + "\'" + cellValue + "\'"); }
	 * 
	 */
}

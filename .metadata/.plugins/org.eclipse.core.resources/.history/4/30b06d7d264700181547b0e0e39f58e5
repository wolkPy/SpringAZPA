package py.com.qa.view;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import py.com.qa.clases.Planilla;
import py.com.qa.configs.Configuracion;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;

import java.awt.BorderLayout;

import javax.swing.border.CompoundBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import com.toedter.calendar.JDateChooser;
import java.awt.SystemColor;

public class PrincipalView extends JFrame implements ActionListener, TreeSelectionListener {
	private static final String sqlSelectPlanillaDescripcion = "select cod_empresa, cod_sucursal, cod_planilla, descripcion, cod_planilla_padre, orden, estado from qa_planilla where cod_empresa = ? and cod_sucursal = ? and descripcion = ? and cod_planilla_padre <> 0";
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	JPanel panelPrincipal;
	JDesktopPane desktop;

	/**
	 * Create the application.
	 */
	public PrincipalView() {
		super();
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		// Make the big window be indented 50 pixels from each edge of the screen.
		int inset = 50;
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		setBounds(inset, inset, screenSize.width - inset * 2, screenSize.height - inset * 2);
		/***********************************/
		/***********************************/

		panelPrincipal = new JPanel();
		panelPrincipal.setBorder(new CompoundBorder());
		setContentPane(panelPrincipal);
		panelPrincipal.setLayout(new BorderLayout(0, 0));
		/*************************************/
		/******** CREAR MENU PRINCIPAL *******/
		/*************************************/
		setJMenuBar(createMenuBar());
		/*************************************/
		/*** DIBUJA EL PANEL DE PRINCIPAL ****/
		/************** SOUTH ****************/
		/************* STATUS ****************/
		/*************************************/
		dibujarStatusPanel();
		/*************************************/
		/*** DIBUJA EL PANEL DE PRINCIPAL ****/
		/************* CENTRAL ***************/
		/******** CREAR SPLITPANEL ***********/
		/*************************************/
		dibujarSplitPanel();
	}

	private void dibujarSplitPanel() {
		JSplitPane principalSplitPanel = null;
		/*************************************/
		/**** DIBUJA EL PANEL DE IZQUIERDA ***/
		/*************************************/
		JPanel treeContainer = dibujarLeftSplitPanel();
		/*************************************/
		/**** DIBUJA EL PANEL DE DERECHA *****/
		/*************************************/
		JPanel workSpacePanel = dibujarRightSplitPanel();
		/*************************************/
		/********* SETEA SPLIT PANEL *********/
		/*************************************/
		principalSplitPanel = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, treeContainer, workSpacePanel);
		principalSplitPanel.setOneTouchExpandable(true);
		panelPrincipal.add(principalSplitPanel, BorderLayout.CENTER);
	}

	private JPanel dibujarRightSplitPanel() {
		JPanel workSpacePanel = new JPanel();
		workSpacePanel.setLayout(new BorderLayout(0, 0));
		/*************************************/
		/**** DIBUJA EL PANEL DE DERECHA *****/
		/************ FILTRO *****************/
		/*************************************/
		JPanel workFilterPanel = new JPanel();
		dibujarFilterPanel(workFilterPanel);
		workSpacePanel.add(workFilterPanel, BorderLayout.NORTH);

		/*************************************/
		/**** DIBUJA EL PANEL DE IZQUIERDA ***/
		/********** WORK PANEL CENTRAL *********/
		/*************************************/
		JPanel workPanel = new JPanel();
		workPanel.setLayout(new BorderLayout(0, 0));
		desktop = new JDesktopPane();
		desktop.setBackground(SystemColor.inactiveCaption);
		workPanel.add(desktop);
		desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
		workSpacePanel.add(workPanel, BorderLayout.CENTER);
		return workSpacePanel;
	}

	private void dibujarFilterPanel(JPanel workFilterPanel) {
		workFilterPanel.setLayout(new FlowLayout());
		{
			JLabel lblFecha = new JLabel("Fecha:");
			workFilterPanel.add(lblFecha);
		}
		{
			JDateChooser dateChooser = new JDateChooser();
			dateChooser.setBounds(0, 0, 120, 20);
			workFilterPanel.add(dateChooser);
		}
		{
			JButton buscarBtt = new JButton("");
			buscarBtt.setIcon(new ImageIcon(PrincipalView.class.getResource("/Buscar.gif")));
			workFilterPanel.add(buscarBtt);
		}
	}

	private JPanel dibujarLeftSplitPanel() {
		JPanel treeContainer = new JPanel(new BorderLayout());
		JTree tree = cargarArbolPlanilla();
		treeContainer.add(new JScrollPane(tree));

		tree.addTreeSelectionListener(this);

		return treeContainer;
	}

	private void dibujarStatusPanel() {
		JPanel statusPanel = new JPanel();
		panelPrincipal.add(statusPanel, BorderLayout.SOUTH);
		{
			JLabel usuarioLbl = new JLabel("Usuario:");
			usuarioLbl.setIcon(new ImageIcon(PrincipalView.class.getResource("/CONTRASE+\u00E6A.gif")));
			statusPanel.add(usuarioLbl);
			JLabel instanciaLbl = new JLabel("Instancia:");
			instanciaLbl.setIcon(new ImageIcon(PrincipalView.class.getResource("/connect_creating.gif")));
			statusPanel.add(instanciaLbl);
			JLabel dataTimeLbl = new JLabel("Fecha-Hora:");
			dataTimeLbl.setIcon(new ImageIcon(PrincipalView.class.getResource("/history.gif")));
			statusPanel.add(dataTimeLbl);
		}
	}

	private JTree cargarArbolPlanilla() {
		JTree tree = new JTree();
		tree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("Planillas") {
			private static final long serialVersionUID = 1L;
			{
				DefaultMutableTreeNode node_1 = null;
				try {
					Connection con = Configuracion.CON;
					Statement stmt = con.createStatement();
					System.out.println(Configuracion.QUERY_PLANILLA);
					ResultSet res = stmt.executeQuery(Configuracion.QUERY_PLANILLA);
					ResultSet rs = null;
					Planilla padre = null;

					while (res.next()) {
						String codEmpresa = res.getString("cod_empresa");
						String codSucursal = res.getString("cod_sucursal");
						long codPlanilla = res.getLong("cod_planilla");
						String descripcion = res.getString("descripcion");
						long codPlanillaPadre = res.getLong("cod_planilla_padre");
						String orden = res.getString("orden");
						String estado = res.getString("estado");
						String consulta = res.getString("consulta");

						padre = new Planilla(codEmpresa, codSucursal, codPlanilla, descripcion, codPlanillaPadre, orden,
								estado, consulta);
						node_1 = new DefaultMutableTreeNode(padre.getDescripcion());
						if (consulta.equalsIgnoreCase("N")) {
							PreparedStatement pstmt = con
									.prepareStatement("select * from qa_planilla where cod_planilla_padre = ?");
							pstmt.setLong(1, codPlanilla);
							rs = pstmt.executeQuery();
							while (rs.next()) {
								node_1.add(new DefaultMutableTreeNode(rs.getString("descripcion")));
							}
						} else {
							node_1.add(new DefaultMutableTreeNode(padre.getDescripcion()));
						}
						this.add(node_1);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}));
		tree.setVisibleRowCount(0);
		for (int i = tree.getVisibleRowCount() - 1; i > -1; i--) {
			tree.expandRow(i);
		}
		return tree;

	}

	protected JMenuBar createMenuBar() {
		JMenuBar menuBar = new JMenuBar();

		// Set up the lone menu.
		JMenu menu = new JMenu("Entrada diaria");
		// menu.setMnemonic(KeyEvent.VK_D);
		menu.setActionCommand("ENTRADADIARIA");
		menu.addActionListener(this);
		menuBar.add(menu);

		menu = new JMenu("Cierre");
		// menu.setMnemonic(KeyEvent.VK_D);
		menu.setActionCommand("CIERRE");
		menu.addActionListener(this);
		menuBar.add(menu);

		menu = new JMenu("Informes");
		// menu.setMnemonic(KeyEvent.VK_D);
		menu.setActionCommand("INFORME");
		menu.addActionListener(this);
		menuBar.add(menu);

		menu = new JMenu("Configuración");
		// menu.setMnemonic(KeyEvent.VK_D);
		menu.setActionCommand("CONFIGURACION");
		menu.addActionListener(this);
		menuBar.add(menu);

		// Set up the first menu item.
		JMenuItem menuItem = new JMenuItem("Planilla");
		// menuItem.setMnemonic(KeyEvent.VK_N);
		menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.ALT_MASK));
		menuItem.setActionCommand("newPlanilla");
		menuItem.addActionListener(this);
		menu.add(menuItem);

		menuItem = new JMenuItem("Variable");
		// menuItem.setMnemonic(KeyEvent.VK_N);
		// menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,
		// ActionEvent.ALT_MASK));
		menuItem.setActionCommand("newVariable");
		menuItem.addActionListener(this);
		menu.add(menuItem);

		menu = new JMenu("Salir");
		// menu.setMnemonic(KeyEvent.VK_D);
		menu.setActionCommand("SALIR");
		menu.addActionListener(this);
		menuBar.add(menu);

		return menuBar;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		System.out.println(e.getActionCommand());
		if ("ENTRADADIARIA".equals(e.getActionCommand())) {
			Configuracion.TIPMODULO = "NEW";
		}
		if ("CIERRE".equals(e.getActionCommand())) {
			Configuracion.TIPMODULO = "BLOQ";
		}
		if ("INFORME".equals(e.getActionCommand())) {
			Configuracion.TIPMODULO = "QUERY";
		}
		if ("CONFIGURACION".equals(e.getActionCommand())) {
			Configuracion.TIPMODULO = "DESIGN";
		}
		if ("SALIR".equals(e.getActionCommand())) {
			quit();
		}
		if ("newPlanilla".equals(e.getActionCommand())) { // new
			crearPlanillaView();
		}
		if ("newVariable".equals(e.getActionCommand())) {
			// crearVariableView();
		}
	}

	protected void crearPlanillaView() {
		PlanillaView pv = new PlanillaView();
		pv.setVisible(true);
		desktop.add(pv);
		try {
			pv.setSelected(true);
		} catch (java.beans.PropertyVetoException e) {
		}
	}

	protected void crearVariableView() {
		VariableView pv = new VariableView();
		pv.setVisible(true);
		desktop.add(pv);
		try {
			pv.setSelected(true);
		} catch (java.beans.PropertyVetoException e) {
		}
	}

	protected void quit() {
		System.exit(0);
	}

	@Override
	public void valueChanged(TreeSelectionEvent e) {
		Planilla p = null;
		try {
			Connection con = Configuracion.CON;
			PreparedStatement pstmt;
			pstmt = con.prepareStatement(sqlSelectPlanillaDescripcion);
			pstmt.setString(1, Configuracion.CODEMPRESA);
			pstmt.setString(2, Configuracion.CODSUCURSAL);
			pstmt.setString(3, e.getPath().getLastPathComponent().toString());

			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				p = new Planilla(rs.getString("cod_empresa"), rs.getString("cod_sucursal"), rs.getLong("cod_planilla"),
						rs.getString("descripcion"), rs.getLong("cod_planilla_padre"), rs.getString("orden"),
						rs.getString("estado"), "");
			}
			pstmt.close();
			rs.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}

		System.out.println("Planilla= " + p.getCodPlanilla() + "_" + p.getDescripcion());

		// if (Configuracion.TIPMODULO.equalsIgnoreCase("DESIGN")) {
		// @SuppressWarnings("unused")
		// PlanillaView pv = new PlanillaView(p);
		// }
		// if (Configuracion.TIPMODULO.equalsIgnoreCase("ENTRADADIARIA")) {
		DataView data = new DataView(e.getPath().getLastPathComponent().toString());
		data.setVisible(true);
		desktop.add(data);

		// }
	}
}
